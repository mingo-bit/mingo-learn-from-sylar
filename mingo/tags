!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
DEBUG	log.h	/^        DEBUG = 1;$/;"	e	enum:mingo::LogLevel::Level	access:public
FileLoagAppender	log.h	/^class FileLoagAppender : public LogAppender$/;"	c	namespace:mingo	inherits:LogAppender
GetLevel	log.h	/^    LogLevel::Level GetLevel() const { return m_level; }$/;"	f	class:mingo::Logger	typeref:typename:LogLevel::Level	access:public	signature:() const
Level	log.h	/^    enum Level {$/;"	g	class:mingo::LogLevel	access:public
LogAppender	log.h	/^class LogAppender{$/;"	c	namespace:mingo
LogEvent	log.h	/^    LogEvent();$/;"	p	class:mingo::LogEvent	access:public	signature:()
LogEvent	log.h	/^class LogEvent{$/;"	c	namespace:mingo
LogFormatter	log.h	/^class LogFormatter{$/;"	c	namespace:mingo
LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:mingo
Logger	log.cpp	/^Logger::Logger(const std::string& name) : m_name(name){$/;"	f	class:mingo::Logger	signature:(const std::string & name)
Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:mingo::Logger	access:public	signature:(const std::string & name="root")
Logger	log.h	/^class Logger{$/;"	c	namespace:mingo
MINGO_LOG_H_	log.h	/^#define MINGO_LOG_H_$/;"	d
StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender$/;"	c	namespace:mingo	inherits:LogAppender
addAppender	log.cpp	/^void Logger::addAppender(LogAppender::ptr appender)$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
debug	log.cpp	/^void Logger::debug(LogEvent::ptr event)$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
error	log.cpp	/^void Logger::error(LogEvent::ptr event){$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
fatal	log.cpp	/^void Logger::fatal(LogEvent::ptr event){$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
format	log.h	/^    std::string format(LogEvent::ptr event); $/;"	p	class:mingo::LogFormatter	typeref:typename:std::string	access:public	signature:(LogEvent::ptr event)
info	log.cpp	/^void Logger::info(LogEvent::ptr event){$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
log	log.cpp	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event)$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogLevel::Level level,LogEvent::ptr event)
log	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event); $/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level level,LogEvent::ptr event)
log	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:mingo::LogAppender	typeref:typename:void	access:public	signature:(LogLevel::Level level,LogEvent::ptr event)
m_content	log.h	/^    std::string m_content;$/;"	m	class:mingo::LogEvent	typeref:typename:std::string	access:private
m_elapse	log.h	/^    uint32_t m_elapse = 0; \/\/从程序开始到现在的毫秒数$/;"	m	class:mingo::LogEvent	typeref:typename:uint32_t	access:private
m_fiberId	log.h	/^    uint32_t m_fiberId = 0; \/\/协程id$/;"	m	class:mingo::LogEvent	typeref:typename:uint32_t	access:private
m_file	log.h	/^    const char* m_file = nullptr;  \/\/文件名$/;"	m	class:mingo::LogEvent	typeref:typename:const char *	access:private
m_level	log.h	/^    LogLevel::Level m_level;        \/\/日志级别;$/;"	m	class:mingo::Logger	typeref:typename:LogLevel::Level	access:private
m_level	log.h	/^    LogLevel::Level m_level; $/;"	m	class:mingo::LogAppender	typeref:typename:LogLevel::Level	access:private
m_line	log.h	/^    int32_t m_line = 0; \/\/行号$/;"	m	class:mingo::LogEvent	typeref:typename:int32_t	access:private
m_name	log.h	/^    std::string m_name;    \/\/日志名称;$/;"	m	class:mingo::Logger	typeref:typename:std::string	access:private
m_threadId	log.h	/^    uint32_t m_threadId = 0; \/\/线程id$/;"	m	class:mingo::LogEvent	typeref:typename:uint32_t	access:private
m_time	log.h	/^    uint32_t m_time = 0; \/\/时间戳$/;"	m	class:mingo::LogEvent	typeref:typename:uint32_t	access:private
mingo	log.cpp	/^namespace mingo {$/;"	n	file:
mingo	log.h	/^namespace mingo {$/;"	n
mingo::FileLoagAppender	log.h	/^class FileLoagAppender : public LogAppender$/;"	c	namespace:mingo	inherits:LogAppender
mingo::LogAppender	log.h	/^class LogAppender{$/;"	c	namespace:mingo
mingo::LogAppender::log	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:mingo::LogAppender	typeref:typename:void	access:public	signature:(LogLevel::Level level,LogEvent::ptr event)
mingo::LogAppender::m_level	log.h	/^    LogLevel::Level m_level; $/;"	m	class:mingo::LogAppender	typeref:typename:LogLevel::Level	access:private
mingo::LogAppender::ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr; $/;"	t	class:mingo::LogAppender	typeref:typename:std::shared_ptr<LogAppender>	access:public
mingo::LogAppender::~LogAppender	log.h	/^    virtual  ~LogAppender() {}$/;"	f	class:mingo::LogAppender	access:public	signature:()
mingo::LogEvent	log.h	/^class LogEvent{$/;"	c	namespace:mingo
mingo::LogEvent::LogEvent	log.h	/^    LogEvent();$/;"	p	class:mingo::LogEvent	access:public	signature:()
mingo::LogEvent::m_content	log.h	/^    std::string m_content;$/;"	m	class:mingo::LogEvent	typeref:typename:std::string	access:private
mingo::LogEvent::m_elapse	log.h	/^    uint32_t m_elapse = 0; \/\/从程序开始到现在的毫秒数$/;"	m	class:mingo::LogEvent	typeref:typename:uint32_t	access:private
mingo::LogEvent::m_fiberId	log.h	/^    uint32_t m_fiberId = 0; \/\/协程id$/;"	m	class:mingo::LogEvent	typeref:typename:uint32_t	access:private
mingo::LogEvent::m_file	log.h	/^    const char* m_file = nullptr;  \/\/文件名$/;"	m	class:mingo::LogEvent	typeref:typename:const char *	access:private
mingo::LogEvent::m_line	log.h	/^    int32_t m_line = 0; \/\/行号$/;"	m	class:mingo::LogEvent	typeref:typename:int32_t	access:private
mingo::LogEvent::m_threadId	log.h	/^    uint32_t m_threadId = 0; \/\/线程id$/;"	m	class:mingo::LogEvent	typeref:typename:uint32_t	access:private
mingo::LogEvent::m_time	log.h	/^    uint32_t m_time = 0; \/\/时间戳$/;"	m	class:mingo::LogEvent	typeref:typename:uint32_t	access:private
mingo::LogEvent::ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr; $/;"	t	class:mingo::LogEvent	typeref:typename:std::shared_ptr<LogEvent>	access:public
mingo::LogFormatter	log.h	/^class LogFormatter{$/;"	c	namespace:mingo
mingo::LogFormatter::format	log.h	/^    std::string format(LogEvent::ptr event); $/;"	p	class:mingo::LogFormatter	typeref:typename:std::string	access:public	signature:(LogEvent::ptr event)
mingo::LogFormatter::ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;  $/;"	t	class:mingo::LogFormatter	typeref:typename:std::shared_ptr<LogFormatter>	access:public
mingo::LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:mingo
mingo::LogLevel::DEBUG	log.h	/^        DEBUG = 1;$/;"	e	enum:mingo::LogLevel::Level	access:public
mingo::LogLevel::Level	log.h	/^    enum Level {$/;"	g	class:mingo::LogLevel	access:public
mingo::Logger	log.h	/^class Logger{$/;"	c	namespace:mingo
mingo::Logger::GetLevel	log.h	/^    LogLevel::Level GetLevel() const { return m_level; }$/;"	f	class:mingo::Logger	typeref:typename:LogLevel::Level	access:public	signature:() const
mingo::Logger::Logger	log.cpp	/^Logger::Logger(const std::string& name) : m_name(name){$/;"	f	class:mingo::Logger	signature:(const std::string & name)
mingo::Logger::Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:mingo::Logger	access:public	signature:(const std::string & name="root")
mingo::Logger::addAppender	log.cpp	/^void Logger::addAppender(LogAppender::ptr appender)$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
mingo::Logger::addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
mingo::Logger::debug	log.cpp	/^void Logger::debug(LogEvent::ptr event)$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
mingo::Logger::debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
mingo::Logger::delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
mingo::Logger::error	log.cpp	/^void Logger::error(LogEvent::ptr event){$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
mingo::Logger::error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
mingo::Logger::fatal	log.cpp	/^void Logger::fatal(LogEvent::ptr event){$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
mingo::Logger::fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
mingo::Logger::info	log.cpp	/^void Logger::info(LogEvent::ptr event){$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
mingo::Logger::info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
mingo::Logger::log	log.cpp	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event)$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogLevel::Level level,LogEvent::ptr event)
mingo::Logger::log	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event); $/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level level,LogEvent::ptr event)
mingo::Logger::m_level	log.h	/^    LogLevel::Level m_level;        \/\/日志级别;$/;"	m	class:mingo::Logger	typeref:typename:LogLevel::Level	access:private
mingo::Logger::m_name	log.h	/^    std::string m_name;    \/\/日志名称;$/;"	m	class:mingo::Logger	typeref:typename:std::string	access:private
mingo::Logger::ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:mingo::Logger	typeref:typename:std::shared_ptr<Logger>	access:public
mingo::Logger::setLevel	log.h	/^    void setLevel(LogLevel::Level level) { m_level = level; }$/;"	f	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level level)
mingo::Logger::warn	log.cpp	/^void Logger::warn(LogEvent::ptr event){$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
mingo::Logger::warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
mingo::StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender$/;"	c	namespace:mingo	inherits:LogAppender
ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr; $/;"	t	class:mingo::LogAppender	typeref:typename:std::shared_ptr<LogAppender>	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr; $/;"	t	class:mingo::LogEvent	typeref:typename:std::shared_ptr<LogEvent>	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;  $/;"	t	class:mingo::LogFormatter	typeref:typename:std::shared_ptr<LogFormatter>	access:public
ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:mingo::Logger	typeref:typename:std::shared_ptr<Logger>	access:public
setLevel	log.h	/^    void setLevel(LogLevel::Level level) { m_level = level; }$/;"	f	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level level)
warn	log.cpp	/^void Logger::warn(LogEvent::ptr event){$/;"	f	class:mingo::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:mingo::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
~LogAppender	log.h	/^    virtual  ~LogAppender() {}$/;"	f	class:mingo::LogAppender	access:public	signature:()
